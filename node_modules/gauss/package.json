{
  "author": {
    "name": "Fredrick Galoso",
    "email": "fredrickgaloso@gmail.com"
  },
  "name": "gauss",
  "description": "JavaScript statistics, analytics, and set library",
  "version": "0.2.8",
  "keywords": [
    "statistics",
    "analytics",
    "timeseries",
    "math",
    "gauss",
    "set"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/wayoutmind/gauss.git"
  },
  "main": "index",
  "engines": {
    "node": "*"
  },
  "dependencies": {},
  "devDependencies": {
    "vows": "latest",
    "uglify-js": "latest"
  },
  "bin": {
    "gauss": "./bin/gauss"
  },
  "scripts": {
    "start": "./bin/gauss",
    "test": "node_modules/.bin/vows test/*",
    "build": "node build.js"
  },
  "readme": "Gauss\n=============\n[![Build Status](https://secure.travis-ci.org/stackd/gauss.png)](http://travis-ci.org/stackd/gauss)\n\n> JavaScript statistics, analytics, and set library - [Node.js](http://nodejs.org/) and web browser ready\n\nEvented, asynchronous, and fast, [Node.js][1] is an attractive platform for data mining, statistics, and data analysis.\n[Gauss](http://en.wikipedia.org/wiki/Carl_Friedrich_Gauss) makes it [easy to calculate and explore data through JavaScript](http://fredrickgaloso.me/talks/gauss.html#9),\nboth on Node.js and within the web browser.\n\n[1]: http://nodejs.org/\n\n## License\nMIT/X11 - See [LICENSE][2]\n\n[2]: http://github.com/wayoutmind/gauss/blob/master/LICENSE\n\n## Getting started\n\n### Install with NPM (Node Package Manager)\n\nGetting started with Gauss + Node.js is easy:\n\n    $ npm install gauss\n\n``` javascript\nvar gauss = require('gauss');\n```\n\n### Installing development dependencies and running tests\n\nTo run Gauss's tests you'll need [Vows](http://vowsjs.org/). NPM can automatically resolve this:\n\n    $ npm install gauss --devel\n\nTo invoke the tests:\n\n    $ npm test\n\n### Using Gauss within a web browser\n\nGauss requires support for ECMAScript 5 `Object.defineProperties`. Compatibility is listed [here](http://kangax.github.com/es5-compat-table/). Download and include [gauss.min.js](https://raw.github.com/wayoutmind/gauss/master/gauss.min.js):\n\n``` html\n<script src=\"gauss.min.js\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\" charset=\"utf-8\">\n    var Vector = gauss.Vector,\n        TimeSeries = gauss.TimeSeries;\n    var set = new gauss.Vector(5, 1, 3, 2, 21),\n        numbers = new Vector([8, 6, 7, 5, 3, 0, 9]),\n        times = new TimeSeries([1315378833000, 3.5], [1315789015000, 7.826]);\n</script>\n```\n\n## API\n\nGauss has methods for univariate (Vector) and time series (TimeSeries) analysis. We're constantly working on adding more functions, adding multivariate statistics, and we encourage additions to the library. Accuracy is a primary concern. If Gauss is returning incorrect results, [please submit an issue](https://github.com/wayoutmind/gauss/issues) and/or [submit a patch](https://github.com/wayoutmind/gauss#fork_box)!\n\n### Instantiation\n\n``` javascript\n// List of numbers\nvar set = new gauss.Vector(5, 1, 3, 2, 21);\n// From a regular Array\nvar numbers = new gauss.Vector([8, 6, 7, 5, 3, 0, 9]);\n// Convert an Array to a Vector with helper method toVector()\nvar vanilla = [4, 1, 2, 5, 6];\nvar chocolate = vanilla.toVector();\n// After instantiation, Gauss objects can be conveniently used like any Array\nnumbers[0] = 2;\nset[1] = 7;\n```\n\n*Note: To prevent unintended scope/prototype pollution, Gauss versions after 0.2.3 have [removed support for monkey patching](https://github.com/wayoutmind/gauss/issues/6) the native Array data type.\nUse the .toArray() method of any Gauss object to a convert to a vanilla Array. Gauss adds a toVector() convenience method to the Array prototype to facilitate converting to Vectors.*\n\n### Callbacks and method chaining\n\nAll of Gauss's methods accept an *optional* [callback][3]:\n\n[3]: http://en.wikipedia.org/wiki/Callback_(computer_programming)\n\n``` javascript\nset.min();\nset.min(function(result) {\n    result / 2;\n    /* Do more things with the minimum*/\n});\n```\n\nIn addition, for methods that return another Vector, method chaining makes it easy to perform calculations that flow through each other:\n\n``` javascript\nset.quantile(4).stdev(); // Find the standard deviation of data set's quartiles\n```\n\nFinally, you can mix and match both callbacks and chaining:\n\n``` javascript\nset.quantile(4).stdev(function(stdev) {\n    if (stdev > 1) {\n        /* Do something awesome */\n    }\n});\n```\n\n### Collection\n\n#### Collection.indexBy\n\n    .indexBy(predicate, callback)\n\nReturns the first index of an element that matches a condition.\n\n#### Collection.indicesOf\n\n    .indicesOf(element, callback)\n\nReturns the indices of all elements that match a value.\n\n#### Collection.indicesBy\n\n    .indicesBy(predicate, callback)\n\nReturns all indices of an element that match a condition.\n\n#### Collection.lastIndexBy\n\n    .lastIndexBy(predicate, callback)\n\nReturns the last index of an element that matches a condition.\n\n#### Collection.find\n\n    .find(predicate, callback)\n\nReturns all the elements that match a condition.\n\n``` javascript\nvar people = new gauss.Collection(\n  { firstname: 'John', lastname: 'Smith' },\n  { firstname: 'Jane', lastname: 'Doe' },\n  { firstname: 'Mike', lastname: 'Smith' },\n  { firstname: 'Susan', lastname: 'Baker' }\n);\n// Using a predicate Function\npeople.find(function(e) { return e.firstname === 'Jane' });\n> [{ firstname: 'Jane', lastname: 'Doe' }]\n// Using a condition Object\npeople.find({ lastname: 'Smith' });\n> [{ firstname: 'John', lastname: 'Smith' },\n  { firstname: 'Mike', lastname: 'Smith' }]\n```\n\n#### Collection.findOne\n\n    .findOne(predicate, callback)\n\nReturns the first element that matches a condition.\n\n``` javascript\n// Using a predicate Function\npeople.findOne(function(e) { return e.firstname === 'Jane' });\n> { firstname: 'Jane', lastname: 'Doe' }\n// Using a condition Object\npeople.findOne({ lastname: 'Smith' });\n> { firstname: 'John', lastname: 'Smith' }\n```\n\n#### Collection.split\n\n    .split(predicate[, callback])\n\nReturns a Collection split by a condition (binomial cluster).\n\n``` javascript\nCollection(1, 2, 3, 4).split(function(e) { return e % 2 === 0 });\n> [[1, 3], [2, 4]]\n```\n\n#### Collection.mode\n\n    .mode(callback)\n\nReturns the value(s) that occur the most frequently in a data set. If there is a tie, returns a Collection of values.\n\n#### Collection.frequency\n\n    .frequency(element, callback)\n\nReturns the number of occurrences of value within a data set.\n\n#### Collection.distribution\n\n    .distribution(format, callback)\n\nReturns an `Object` containing the (frequency) distribution of values within the Collection. Default format: `absolute`; `relative` returns ratio of occurrences and total number of values in a data set. \n\n``` javascript\nset.distribution();\n> {\n    1: 1,\n    2: 1,\n    3: 1,\n    5: 1,\n    21: 1\n  }\nset.distribution('relative');\n> {\n    1: 0.2,\n    2: 0.2,\n    3: 0.2,\n    5: 0.2,\n    21: 0.2\n  }\n```\n\n#### Collection.append\n\n    .append(that, callback)\n\nReturn Collection appended with an Array.\n\n``` javascript\nvar numbers = new Collection(1, 2, 3).append([1, 2, 3]);\n> [1, 2, 3, 1, 2, 3]\n```\n\n#### Collection.unique\n\n    .unique(callback)\n\nReturn a Collection with unique values.\n\n``` javascript\nvar numbers = new Collection(1, 2, 3, 3, 4, 4).unique();\n> [1, 2, 3, 4]\n```\n\n### Vector\n\n#### Vector.min\n\n    .min(callback)\n\nReturns the smallest number.\n\n#### Vector.max\n\n    .max(callback)\n\nReturns the largest number.\n\n#### Vector.equal\n\n    .equal(that)\n\nReturns `true` or `false` if Vector values are equal to another Vector or Array.\n\n#### Vector.sum\n\n    .sum(callback)\n\nReturns the sum of the numbers.\n\n#### Vector.product\n\n    .product(callback)\n\nReturns the product of the numbers.\n\n#### Vector.push\n\n    .push(number1, ..., numberN, callback)\n\nReturns the updated Vector with one or more elements appended to the end; performs/maintains streaming calculations.\n\n``` javascript\nvar Vector = require('gauss').Vector,\n    digits = new Vector();\n// Push some numbers in\ndigits.push(1, 2, 3);\n> 3\ndigits.sum();\n> 6\n// Keep on pushing; sum is updated as numbers are pushed\n digits.push(4, 5, 6);\n> 6\n```\n*Note: Streaming calculations like sum(), product(), variance(), and functions dependent on streaming capable functions benefit from O(1) amortized performance.*\n\n#### Vector.range\n\n    .range(callback)\n\nReturns the difference between the largest and smallest value in a data set.\n\n#### Vector.mean\n\n    .mean(callback)\n\nReturns the arithmetic mean.\n\n#### Vector.gmean\n\n    .gmean(callback)\n\nReturns the geometric mean.\n\n#### Vector.hmean\n\n    .hmean(callback)\n\nReturns the harmonic mean.\n\n#### Vector.qmean\n\n    .qmean(callback)\n\nReturns the quadratic mean (RMS, root mean square).\n\n#### Vector.pmean\n\n    .pmean(p, callback)\n\nReturns the power/generalized mean given an order or power *p*.\n\n```javascript\n// p = -1, harmonic mean\nset.pmean(-1);\n// p = 1, arithmetic mean\nset.pmean(1);\n// p = 2, quadratic mean\nset.pmean(2);\n```\n\n#### Vector.median\n\n    .median(callback)\n\nReturns the median. If there are an even amount of numbers in the data set, returns the arithmetic mean of the two middle values.\n\n#### Vector.mode\n\n    .mode(callback)\n\nReturns the value(s) that occur the most frequently in a data set. If there is a tie, returns a Vector of values.\n\n#### Vector.variance\n\n    .variance(callback)\n\nReturns a measure of how far a set of numbers are spread out from each other.\n\n#### Vector.stdev\n\n    .stdev(percent, callback)\n\nReturns the standard deviation of data set. If a percent is given, returns the standard deviation with respect to a percentile of the population.\n\n#### Vector.frequency\n\n    .frequency(value, callback)\n\nReturns the number of occurrences of value within a data set.\n\n#### Vector.percentile\n\n    .percentile(value, callback)\n\nReturns the value that below which a certain percent of observations fall within the data set.\n\n#### Vector.density\n\n    .density(percent, callback)\n\nReturns a Vector which is a percentile subset of values occurring within a data set.\n\n#### Vector.distribution\n\n    .distribution(format, callback)\n\nReturns an `Object` containing the (frequency) distribution of values within the Vector. Default format: `absolute`; `relative` returns ratio of occurrences and total number of values in a data set. \n\n``` javascript\nset.distribution();\n> {\n    1: 1,\n    2: 1,\n    3: 1,\n    5: 1,\n    21: 1\n  }\nset.distribution('relative');\n> {\n    1: 0.2,\n    2: 0.2,\n    3: 0.2,\n    5: 0.2,\n    21: 0.2\n  }\n```\n\n#### Vector.quantile\n\n    .quantile(quantity, callback)\n\nReturns a Vector of values that divide a frequency distribution into equal groups, each containing the same fraction of the total data set.\n\n``` javascript\nset.quantile(4); // Quartiles\n```\n\n#### Vector.sma\n\n    .sma(period, callback)\n\nReturns a Vector of the simple moving average (SMA); unweighted means of the previous n data points. `period` is the length of observation window for moving average.\n\n``` javascript\nvar prices = [22.2734, 22.194, 22.0847, 22.1741, 22.184, 22.1344,\n22.2337, 22.4323, 22.2436, 22.2933, 22.1542, 22.3926,\n22.3816, 22.6109, 23.3558, 24.0519, 23.753, 23.8324,\n23.9516, 23.6338, 23.8225, 23.8722, 23.6537, 23.187,\n23.0976, 23.326, 22.6805, 23.0976, 22.4025, 22.1725];\n\nprices = prices.toVector();\n\n// 10-period SMA\nprices.sma(10);\n> [ 22.22475, 22.21283, 22.232689999999998,\n    22.26238, 22.30606, 22.42324,\n    22.61499, 22.76692, 22.90693,\n    23.07773, 23.211779999999997, 23.37861,\n    23.52657, 23.653779999999998, 23.711389999999998,\n    23.68557, 23.61298, 23.50573,\n    23.43225, 23.27734, 23.13121\n  ]\n```\n\n#### Vector.ema\n\n    .ema(options, callback)\n\nReturns a Vector of the exponential moving average (EMA); weighted means of the previous n data points.\n`options` is\n\n- Number Length of the observation window for moving average, using the default smoothing ratio (2 / period + 1) **or**\n- Object.period Length of the observation window for moving average\n- Object.ratio Function returning a Number to be used as smoothing ratio\n\n``` javascript\n// 10-period EMA\nprices.ema(10);\n> [ 22.22475, 22.21192272727273, 22.24477314049587,\n    22.269650751314803, 22.331696069257568, 22.51789678393801,\n    22.796806459585646, 22.970659830570074, 23.127339861375514,\n    23.27720534112542, 23.34204073364807, 23.429396963893875,\n    23.509906606822263, 23.536050860127308, 23.47258706737689,\n    23.40440760058109, 23.390151673202713, 23.261124096256765,\n    23.231392442391897, 23.080684725593372, 22.91556023003094\n  ]\n\n// 10-period Welles Wilder EMA\nprices.ema({\n    period: 10,\n    ratio: function(n) { return 1 / n; }\n});\n> [ 22.22475, 22.217695, 22.2351855,\n    22.24982695, 22.285934255, 22.3929208295,\n    22.55881874655, 22.678236871895, 22.793653184705498,\n    22.90944786623495, 22.981883079611453, 23.065944771650308,\n    23.146570294485276, 23.19728326503675, 23.196254938533073,\n    23.186389444679765, 23.20035050021179, 23.14836545019061,\n    23.14328890517155, 23.069210014654395, 22.979539013188955\n  ]\n```\n\n#### Vector.delta\n\n    .delta(callback)\n\nReturns a Vector of values containing the sequential difference between numbers in a sequence.\n\n#### Vector.extend\n\n    .extend(methods, callback)\n\nReturns a Vector extended with named functions.\n\nWithin the function body, `this` is attached to the Vector being extended and the function may take zero or more arguments.\nTo maintain chainability, return `this`.\n\n``` javascript\n// Instantiate a new Vector with extensions\nvar set = new Vector(14, 6, 9, 3, 18,\n    7, 11, 1, 2, 20,\n    12, 16, 8, 4, 5,\n    19, 15, 17, 10, 13\n).extend({\n    head: function() {\n        return this[0];\n    },\n    tail: function() {\n        return this.slice(1);\n    }\n});\nset.head()\n> 14\nset.tail()\n> [ 6, 9, 3, 18,\n    7, 11, 1, 2, 20,\n    12, 16, 8, 4, 5,\n    19, 15, 17, 10, 13\n  ]\n// Extend instantiated objects\nset.extend({\n    // Distribution of deltas\n    ddist: function(format) {\n        return this.delta().distribution(format);\n    }\n});\nset.ddist('relative')\n> { \n    '1': 0.10526315789473684,\n    '2': 0.05263157894736842,\n    '3': 0.10526315789473684,\n    '4': 0.10526315789473684,\n    '14': 0.05263157894736842,\n    '15': 0.05263157894736842,\n    '18': 0.05263157894736842,\n    '-11': 0.05263157894736842,\n    '-10': 0.05263157894736842,\n    '-8': 0.15789473684210525,\n    '-7': 0.05263157894736842,\n    '-6': 0.05263157894736842,\n    '-4': 0.10526315789473684\n  }\n```\n\n#### Vector.copy\n\n    .copy(callback)\n\nReturns a copy of the data set.\n\n#### Vector.clone\n\n    .clone(callback)\n\nReturns another instance of the Vector object and data.\n\n### Sample\n\nBy default, `Vector` calculates values against the population `n`. However, sample statistics functions on `n - 1` are available by using the `sample` modifier for the following functions:\n\n``` javascript\nVector().sample\n{ mean: [Function],\n  gmean: [Function],\n  hmean: [Function],\n  qmean: [Function],\n  pmean: [Function],\n  variance: [Function],\n  stdev: [Function] }\n```\n\n### Math\n\n`Vector` supports applying all the [Math](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math#Methods) object methods to an entire Vector set of numbers.\n\nFor example, applying `pow` primitive method on a set to calculate the quadratic mean\n\n``` javascript\nvar squares = set.pow(2); // A Vector of set's members squared\n> [25, 1, 9, 4, 441]\nMath.sqrt(squares.sum() / squares.length); // Sum the squares -> find average -> quadratic mean (RMS)\n> 9.797958971132712\n```\n\n### TimeSeries\n\nPerform time series analysis. TimeSeries currently accepts time in epoch milliseconds followed by a numeric value.\n\n``` javascript\nvar gauss = require('gauss');\nvar set = new gauss.TimeSeries([1315378833000, 3.5], [1315789015000, 7.826]);\n```\n\n#### TimeSeries.times\n\n    .times(callback)\n\nReturns a Vector of the times.\n\n#### TimeSeries.values\n\n    .values(callback)\n\nReturns a Vector of the time series values.\n\n### Using the REPL console\n\nTo experiment with Gauss or to quickly start a Node.js command-line environment for number crunching, Gauss ships with a lightweight REPL (Read–eval–print loop). Start the REPL with `npm start` within the source directory, or `gauss` if installed globally (via `npm install -g gauss`).\n\nFor example, using the `help()` function and analyzing a data file from the Gauss REPL:\n\n``` javascript\n$ gauss\ngauss> help()\nGauss 0.2.8\n   /* https://github.com/wayoutmind/gauss#api */ \n   Functions: print, inspect, cwd, clear, install, uninstall, help\n   Usage:\n     var set = new Vector(1, 2, 3);\n     var times = new gauss.TimeSeries();\n{ version: '0.2.8',\n  Collection: [Function],\n  Vector: [Function],\n  TimeSeries: [Function] }\ngauss> var fs = require('fs');\ngauss> var data = fs.readFileSync('data.txt').toString();\ngauss> data = data.split('\\n');\n[ '8',\n  '6',\n  '7',\n  '5',\n  '3',\n  '0',\n  '9' ]\ngauss> data = data.map(function(line) { return parseInt(line) });\ngauss> var set = new Vector(data);\ngauss> set.mean()\n5.428571428571429\n```\n",
  "readmeFilename": "README.md",
  "_id": "gauss@0.2.8",
  "dist": {
    "shasum": "e7fe5c754ac10aa2be32b48317be5e5b201fb638"
  },
  "_from": "gauss@*",
  "_resolved": "https://registry.npmjs.org/gauss/-/gauss-0.2.8.tgz"
}
