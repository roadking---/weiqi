// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.DapuBoard = (function(_super) {
    __extends(DapuBoard, _super);

    function DapuBoard(board, opts) {
      var _this = this;

      this.board = board;
      this.opts = opts;
      DapuBoard.__super__.constructor.call(this, this.board, this.opts);
      if (localStorage.dapu) {
        this.initial = JSON.parse(localStorage.dapu);
        _.each(this.initial.moves, function(x) {
          if (!x.repealed) {
            return _this.place(x);
          }
        });
        this.change_to_next(this.initial.next);
      } else {
        this.initial = {
          created: new Date().getTime(),
          moves: [],
          next: 'black'
        };
      }
    }

    DapuBoard.prototype["new"] = function() {
      return delete localStorage.play;
    };

    DapuBoard.prototype.on_click = function(pos, player) {
      DapuBoard.__super__.on_click.call(this, pos, player);
      return localStorage.dapu = JSON.stringify(this.initial);
    };

    DapuBoard.prototype.on_show_steps = function(step) {
      var max_id, recent_comments, status, steps, _ref;

      if (step == null) {
        step = ((_ref = this.initial.moves) != null ? _ref.length : void 0) - 1;
      }
      if (step == null) {
        return;
      }
      $('#comments').empty();
      status = this.status_quo();
      if (!status || !this.initial.comments) {
        return;
      }
      steps = _.chain(this.initial.comments).keys().filter(function(x) {
        return status.step >= Number(x);
      }).value().sort();
      recent_comments = [];
      while (recent_comments.length < 20 && steps.length > 0) {
        step = steps.pop();
        max_id = this.initial.comments[step].next_id;
        while (recent_comments.length < 20 && max_id >= 0) {
          max_id--;
          if (this.initial.comments[step][max_id]) {
            recent_comments.push(this.initial.comments[step][max_id]);
          }
        }
      }
      return _.chain(recent_comments).sortBy(function(x) {
        return x.step + '_' + x.ts;
      }).map(function(x) {
        x = _.clone(x);
        x.ts = moment(x.ts).format('YYYY/MM/DD HH:mm');
        return x;
      }).each(update_comment);
    };

    return DapuBoard;

  })(window.PlayBoard);

  $(function() {
    var b, title;

    $('#tabs a').click(function() {
      var board, final_step, game;

      if ($(this).parent().hasClass('active')) {

      } else {
        $('#tabs li').removeClass('active');
        $(this).parent().addClass('active');
        if ($(this).attr('id') === 'gaming') {
          $('#gaming-board').show();
          clear_pub_input();
        } else {
          $('#gaming-board').hide();
        }
        if ($(this).attr('id') === 'trying') {
          final_step = $('#gaming-board').data('data').get_moves().step;
          game = _.clone($('#gaming-board').data('data').initial);
          game.moves = _.chain(game.moves).filter(function(x, i) {
            return i <= final_step;
          }).map(function(x) {
            return _.clone(x);
          }).value();
          board = $('#gaming-board').clone().insertAfter($('#gaming-board')).attr('id', 'trying-board').show().data('game', game);
          board.data('final_step', final_step);
          game.title = 'Snapshot - ' + (final_step + 1);
          $('input.title').val(game.title);
          return new PlayBoard(board);
        } else {
          delete $('#trying-board').data('data');
          delete $('#trying-board').data('game');
          return $('#trying-board').remove();
        }
      }
    });
    b = new DapuBoard($('#gaming-board'));
    title = b.board.find('input.title').change(function() {
      b.initial.title = $(this).val();
      return localStorage.dapu = JSON.stringify(b.initial);
    });
    if (b.initial.title) {
      title.val(b.initial.title);
    } else {
      title.val(title.attr('_text') + ' - ' + moment().format('YYYY/MM/DD HH:mm')).change();
    }
    $.each(b.board.find('.players input'), function() {
      var tmp, _ref, _ref1;

      if (tmp = (_ref = b.initial.players) != null ? (_ref1 = _ref[$(this).attr('_player')]) != null ? _ref1[$(this).attr('_type')] : void 0 : void 0) {
        return $(this).val(tmp);
      }
    });
    b.on_show_steps();
    b.board.find('.players input').change(function() {
      var _base, _base1, _name, _ref, _ref1;

      if ((_ref = (_base = b.initial).players) == null) {
        _base.players = {};
      }
      if ((_ref1 = (_base1 = b.initial.players)[_name = $(this).attr('_player')]) == null) {
        _base1[_name] = {};
      }
      b.initial.players[$(this).attr('_player')][$(this).attr('_type')] = $(this).val();
      return localStorage.dapu = JSON.stringify(b.initial);
    });
    $('#undo').click(function() {
      var idx, player;

      idx = b.initial.moves.length - 1;
      _.each(b.initial.moves, function(x) {
        if (x.repealed === idx) {
          return delete x.repealed;
        }
      });
      b.initial.moves.pop();
      b.redraw();
      localStorage.dapu = JSON.stringify(b.initial);
      player = b.board.attr('next');
      return b.change_to_next(player === 'black' ? 'white' : 'black');
    });
    $('#discard').click(function() {
      delete localStorage.dapu;
      return location.reload();
    });
    return install_pub('dapu');
  });

}).call(this);
