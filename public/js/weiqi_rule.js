// Generated by CoffeeScript 1.6.2
(function() {
  var find, find_block, move, move_step, repeal, retract;

  find = function(items, pos) {
    return _.filter(items, function(x) {
      return !x.repealed && x.pos[0] === pos[0] && x.pos[1] === pos[1];
    })[0];
  };

  find_block = function(items, pos) {
    var adjacent, block, item, liberty, newly_found, opposite;

    item = find(items, pos);
    if (!item) {
      return null;
    }
    block = [item];
    liberty = [];
    opposite = [];
    newly_found = [item];
    while (newly_found.length) {
      adjacent = _.chain(newly_found).map(function(x) {
        return [[x.pos[0] - 1, x.pos[1]], [x.pos[0] + 1, x.pos[1]], [x.pos[0], x.pos[1] - 1], [x.pos[0], x.pos[1] + 1]];
      }).flatten(true).filter(function(x) {
        return x[0] >= 0 && x[0] <= 18 && x[1] >= 0 && x[1] <= 18;
      }).uniq().reject(function(x) {
        return _.chain([block, liberty, opposite]).flatten().some(function(y) {
          return y.pos[0] === x[0] && y.pos[1] === x[1];
        }).value();
      }).map(function(x) {
        var _ref;

        return (_ref = find(items, x)) != null ? _ref : {
          pos: x,
          player: 'none'
        };
      }).value();
      if (adjacent.length) {
        newly_found = _.filter(adjacent, function(x) {
          return x.player === item.player;
        });
        liberty.push(_.filter(adjacent, function(x) {
          return x.player === 'none';
        }));
        opposite.push(_.filter(adjacent, function(x) {
          return x.player !== 'none' && x.player !== item.player;
        }));
        block = _.flatten([block, newly_found]);
      } else {
        newly_found = [];
      }
    }
    return {
      block: block,
      liberty: _.chain(liberty).flatten().pluck('pos').groupBy(function(x) {
        return x.join(',');
      }).values().pluck(0).value(),
      opposite: _.chain(opposite).flatten().groupBy(function(x) {
        return x.pos.join(',');
      }).values().pluck(0).value()
    };
  };

  move = function(items, step, test) {
    var rlt, target_block, _ref;

    if (test == null) {
      test = false;
    }
    if (find(items, step.pos)) {
      return new Error("already exists in " + step.pos);
    }
    if ((_ref = step.n) == null) {
      step.n = items.length;
    }
    items.push(step);
    rlt = find_block(items, step.pos);
    target_block = _.chain(rlt.opposite).map(function(x, i) {
      var block;

      if (i === 0) {
        this.target_block = [];
      }
      if (_.chain(this.target_block).pluck('block').flatten().some(function(y) {
        return x.pos[0] === y.pos[0] && x.pos[1] === y.pos[1];
      }).value()) {
        return null;
      }
      block = find_block(items, x.pos);
      this.target_block.push(block);
      return block;
    }).compact().reject(function(x) {
      return x.liberty.length;
    }).value();
    if (test) {
      items.pop();
    }
    if (target_block.length) {
      return target_block;
    } else if (rlt.liberty.length) {
      return null;
    } else {
      if (!test) {
        items.pop();
      }
      throw new Error("not allowed in " + step.pos + " " + step.player);
    }
  };

  repeal = function(items, block) {
    return _.each(block.block, function(x) {
      return x.repealed = items.length - 1;
    });
  };

  move_step = function(items, step) {
    var blocks, deprecated, last, taken, try_move;

    if (_.any(items, function(x) {
      return !x.repealed && x.pos[0] === step.pos[0] && x.pos[1] === step.pos[1];
    })) {
      throw new Error("already exists: not allowed in " + step.pos + " " + step.player);
    }
    try_move = function() {
      var blocks;

      blocks = move(items, step);
      if (blocks) {
        _.each(blocks, function(x) {
          return repeal(items, x);
        });
      }
      return blocks;
    };
    last = (items != null ? items.length : void 0) > 1 ? items[items.length - 1] : null;
    blocks = try_move();
    taken = _.pluck(blocks, 'block');
    if (last && taken.length === 1 && taken[0].length === 1) {
      taken = taken[0][0];
      if (taken.player === last.player && _.every([0, 1], function(i) {
        return last.pos[i] === taken.pos[i];
      })) {
        if (taken = _.where(items, {
          repealed: last.n
        })) {
          if (taken.length === 1) {
            taken = taken[0];
            if (taken.player === step.player && _.every([0, 1], function(i) {
              return step.pos[i] === taken.pos[i];
            })) {
              deprecated = items.pop();
              _.each(items, function(x) {
                if (x.repealed === deprecated.n) {
                  return delete x.repealed;
                }
              });
              throw new Error("dajie: not allowed in " + step.pos + " " + step.player);
            }
          }
        }
      }
    }
    return blocks;
  };

  if (typeof exports !== "undefined" && exports !== null) {
    exports.move_step = move_step;
  }

  if (typeof window !== "undefined" && window !== null) {
    window.move_step = move_step;
  }

  retract = function(items) {
    var last_step;

    if (!items.length) {
      return items;
    }
    last_step = items.pop();
    _.chain(items).where({
      repealed: last_step.n
    }).each(function(x) {
      return delete x.repealed;
    });
    return items;
  };

  if (typeof exports !== "undefined" && exports !== null) {
    exports.retract = retract;
  }

  if (typeof window !== "undefined" && window !== null) {
    window.retract = retract;
  }

}).call(this);
