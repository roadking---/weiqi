// Generated by CoffeeScript 1.6.2
(function() {
  var Weiqi, reset_seat, set_seat, show_notice, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  set_seat = function(seat, player) {
    var s, _ref;

    s = $("#seats #" + seat).addClass('taken').removeClass('vacant');
    s.find('.nickname').text(player.nickname);
    return s.find('.title').text((_ref = player.title) != null ? _ref : '');
  };

  reset_seat = function(seat, player) {
    var s;

    s = $("#seats #" + seat).removeClass('taken').addClass('vacant');
    s.find('.nickname').text('?');
    return s.find('.title').text('');
  };

  show_notice = function(msg, style) {
    var text;

    text = JSON.parse($('#game-notice').attr('_text'));
    return $('#game-notice').empty().append("<p class='" + style + " offset3'>" + text[msg] + "</p>");
  };

  Weiqi = (function(_super) {
    __extends(Weiqi, _super);

    function Weiqi() {
      this.on_disconnect = __bind(this.on_disconnect, this);      _ref = Weiqi.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Weiqi.prototype.on_connect = function() {
      Weiqi.__super__.on_connect.call(this);
      return console.log('connected');
    };

    Weiqi.prototype.on_next_player = function(player) {
      $("#players .next").removeClass('next');
      return $("#players ." + player).addClass('next');
    };

    Weiqi.prototype.on_start_taking_seat = function() {
      return location.reload();
    };

    Weiqi.prototype.on_seats_update = function(seats) {
      return _.each(['black', 'white'], function(s) {
        if (seats[s]) {
          return set_seat(s, seats[s]);
        } else {
          return reset_seat(s);
        }
      });
    };

    Weiqi.prototype.on_quit = function(res) {
      return location.reload();
    };

    Weiqi.prototype.on_resume = function(res) {
      return location.reload();
    };

    Weiqi.prototype.on_start = function() {
      _.delay((function() {
        return $('#seats').hide();
      }), 5000);
      if ($('.board').attr('iam') === 'player') {
        if ($('.board').attr('next') === $('.board').attr('seat')) {
          return show_notice('started_please_move', 'text-warning');
        } else {
          return show_notice('started_please_wait', 'text-success');
        }
      }
    };

    Weiqi.prototype.on_click = function(pos) {
      if (this.board.attr('status') === 'started' && this.board.attr('iam') === 'player' && this.board.attr('next') === this.board.attr('seat')) {
        Weiqi.__super__.on_click.call(this, pos);
        return show_notice('started_please_wait', 'text-success');
      }
    };

    Weiqi.prototype.on_disconnect = function() {
      show_notice('connection_lost', 'text-warning');
      console.log('disconnect');
      return this.connect();
    };

    Weiqi.prototype.on_move = function(moves, next) {
      if (this.board.attr('status') === 'started' && this.board.attr('iam') === 'player' && next === this.board.attr('seat')) {
        return show_notice('started_please_move', 'text-warning');
      }
    };

    Weiqi.prototype.on_show_steps = function(step) {
      var _ref1;

      if (step == null) {
        step = ((_ref1 = this.initial.moves) != null ? _ref1.length : void 0) - 1;
      }
      if (step == null) {
        return;
      }
      return $('#blogs .blog').each(function(i) {
        var blog_step;

        blog_step = $(this).find('.step').attr('_step');
        if (!step || !blog_step || step >= Number(blog_step)) {
          return $(this).show();
        } else {
          return $(this).hide();
        }
      });
    };

    Weiqi.prototype.on_comment = function(comment) {
      comment.ts = moment(Number(comment.ts)).format('YYYY/MM/DD HH:mm');
      return update_comment(comment);
    };

    return Weiqi;

  })(ConnectedBoard);

  $(function() {
    var b, m, players, refresh_view;

    b = new Weiqi($('#gaming-board'), {
      LINE_COLOR: '#53595e',
      NINE_POINTS_COLOR: '#53595e',
      size: 600
    });
    $('#toolbox #num_btn').click(function() {
      var _ref1;

      $(this).toggleClass('show-number');
      return (_ref1 = $('#gaming-board:visible, #trying-board:visible').data('data')) != null ? _ref1.toggle_num_shown() : void 0;
    });
    $('#toolbox #beginning').click(function() {
      var _ref1;

      return (_ref1 = $('#gaming-board:visible, #trying-board:visible').data('data')) != null ? _ref1.go_to_beginning() : void 0;
    });
    $('#toolbox #ending').click(function() {
      var _ref1;

      return (_ref1 = $('#gaming-board:visible, #trying-board:visible').data('data')) != null ? _ref1.go_to_ending() : void 0;
    });
    $('#toolbox #back').click(function() {
      var _ref1;

      return (_ref1 = $('#gaming-board:visible, #trying-board:visible').data('data')) != null ? _ref1.go_back() : void 0;
    });
    $('#toolbox #forward').click(function() {
      var _ref1;

      return (_ref1 = $('#gaming-board:visible, #trying-board:visible').data('data')) != null ? _ref1.go_forward() : void 0;
    });
    refresh_view = function() {
      var show_num, _ref1;

      show_num = (_ref1 = $('#gaming-board:visible, #trying-board:visible').data('data')) != null ? _ref1.show_num : void 0;
      if (show_num) {
        return $('#toolbox #num_btn').removeClass('show-number');
      } else {
        return $('#toolbox #num_btn').addClass('show-number');
      }
    };
    $('#tabs a').click(function() {
      var board, final_step, game;

      if ($(this).parent().hasClass('active')) {

      } else {
        $('#tabs li').removeClass('active');
        $(this).parent().addClass('active');
        if ($(this).attr('id') === 'gaming') {
          $('#gaming-board').show();
          clear_pub_input();
          refresh_view();
        } else {
          $('#gaming-board').hide();
        }
        if ($(this).attr('id') === 'trying') {
          final_step = $('#gaming-board').data('data').get_moves().step;
          game = _.clone($('#gaming-board').data('data').initial);
          game.moves = _.chain(game.moves).filter(function(x, i) {
            return i <= final_step;
          }).map(function(x) {
            return _.clone(x);
          }).value();
          board = $('#gaming-board').clone().insertAfter($('#gaming-board')).attr('id', 'trying-board').show().data('game', game);
          board.data('final_step', final_step);
          game.title = 'Snapshot - ' + (final_step + 1);
          $('input.title').val(game.title);
          new PlayBoard(board);
          refresh_view();
        } else {
          delete $('#trying-board').data('data');
          delete $('#trying-board').data('game');
          $('#trying-board').remove();
        }
        if ($(this).attr('id') === 'surrender') {
          $('#surrender-view').show();
        } else {
          $('#surrender-view').hide();
        }
        if ($(this).attr('id') === 'detail') {
          return $('#detail-view').show();
        } else {
          return $('#detail-view').hide();
        }
      }
    });
    if (b.board.attr('status') === 'taking_seat') {
      players = JSON.parse(b.board.attr('players'));
      if (players) {
        _.chain(players).pairs().each(function(x) {
          if (x[1].id === b.board.attr('uid')) {
            return set_seat(x[0], {
              nickname: $('#seats').attr('_text')
            });
          } else {
            return set_seat(x[0], x[1]);
          }
        });
      }
      $('#seats #black, #white').click(function() {
        var seat;

        if ($(this).hasClass('vacant')) {
          return b.taking_seat(seat = $(this).attr('id'), function(res) {
            if (res !== 'fail') {
              $('.board').attr('seat', seat);
              set_seat(seat, {
                nickname: $('#seats').attr('_text')
              });
              $(this).addClass('me');
              return _.chain($('#seats #black, #white')).difference([this]).each(function(x) {
                if ($(x).hasClass('me')) {
                  $(x).removeClass('me');
                  return reset_seat($(x).attr('id'));
                }
              });
            }
          });
        }
      });
    }
    install_pub('connected');
    m = /step=(\d+)/.exec(location.search);
    if (m) {
      b.show_steps_to = m[1];
      b.redraw();
      b.on_show_steps(m[1]);
    } else {
      b.on_show_steps();
    }
    return $('#aside-tabs a').click(function() {
      if ($(this).parent().hasClass('active')) {

      } else {
        $('#aside-tabs li').removeClass('active');
        $(this).parent().addClass('active');
        if ($(this).attr('id') === 'aside-game') {
          $('#game-controls').show();
        } else {
          $('#game-controls').hide();
        }
        if ($(this).attr('id') === 'aside-comments') {
          return $('#blogs-view').show();
        } else {
          return $('#blogs-view').hide();
        }
      }
    });
  });

  window.show_trying_board = function(game) {
    var board, next, tb;

    delete $('#trying-board').data('data');
    delete $('#trying-board').data('game');
    $('#trying-board').remove();
    $('#tabs li').removeClass('active');
    $('#tabs li a#trying').parent().addClass('active');
    $('#gaming-board').hide();
    next = game.next;
    board = $('#gaming-board').clone().insertAfter($('#gaming-board')).attr('id', 'trying-board').show().data('game', game);
    tb = new PlayBoard(board);
    return tb.change_to_next(next);
  };

}).call(this);
