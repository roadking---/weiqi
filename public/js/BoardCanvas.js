// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.BoardCanvas = (function() {
    function BoardCanvas(canvas, opts) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;

      this.opts = opts;
      this.circle = __bind(this.circle, this);
      if (this.opts) {
        _.defaults(this, this.opts);
      }
      if ((_ref = this.LINE_COLOR) == null) {
        this.LINE_COLOR = '#aaa';
      }
      if ((_ref1 = this.NINE_POINTS_COLOR) == null) {
        this.NINE_POINTS_COLOR = '#53595e';
      }
      if ((_ref2 = this.BACKGROUND) == null) {
        this.BACKGROUND = 'rgba(0,0,0,0)';
      }
      if ((_ref3 = this.LINES) == null) {
        this.LINES = 19;
      }
      if ((_ref4 = this.size) == null) {
        this.size = 200;
      }
      if ((_ref5 = this.STONE_RADIUS) == null) {
        this.STONE_RADIUS = this.size * .7 / 38;
      }
      if ((_ref6 = this.NINE_POINTS_RADIUS) == null) {
        this.NINE_POINTS_RADIUS = this.STONE_RADIUS / 2.5;
      }
      if ((_ref7 = this.MARGIN) == null) {
        this.MARGIN = Math.round(this.STONE_RADIUS * 1.4);
      }
      this.black = '#283734';
      this.black_border = this.black;
      this.white = '#fdfcf9';
      this.white_border = this.black_border;
      if (canvas[0].tagName !== 'CANVAS') {
        canvas = $('<canvas></canvas>').appendTo(canvas).attr({
          width: this.size,
          height: this.size
        });
      }
      this.ctx = canvas[0].getContext("2d");
      this.interval = (this.size - 2 * this.MARGIN) / (this.LINES - 1);
    }

    BoardCanvas.prototype.circle = function(x, y, radius, fill_color, stroke_color) {
      if (stroke_color == null) {
        stroke_color = 'black';
      }
      x += .5;
      y += .5;
      this.ctx.fillStyle = fill_color != null ? fill_color : this.black;
      if (!stroke_color) {
        this.ctx.strokeStyle = fill_color;
      }
      this.ctx.lineWidth = 1;
      this.ctx.beginPath();
      this.ctx.arc(x, y, radius, 0, Math.PI * 2, false);
      this.ctx.closePath();
      if (fill_color) {
        this.ctx.fill();
      }
      if (stroke_color) {
        return this.ctx.stroke();
      }
    };

    BoardCanvas.prototype.locate = function(n) {
      return Math.round(this.MARGIN + this.interval * n);
    };

    BoardCanvas.prototype.position = function(pos) {
      var x, xx, y, yy, _ref, _ref1,
        _this = this;

      _ref = _.map(pos, function(num) {
        return num = (num - _this.MARGIN) / _this.interval;
      }), x = _ref[0], y = _ref[1];
      _ref1 = _.map([x, y], function(num) {
        if (num < 0) {
          num = 0;
        }
        if (num > _this.LINES - 1) {
          num = _this.LINES - 1;
        }
        if (2 * num >= Math.ceil(num) + Math.floor(num)) {
          return Math.ceil(num);
        } else {
          return Math.floor(num);
        }
      }), xx = _ref1[0], yy = _ref1[1];
      if (Math.pow(x - xx, 2) + Math.pow(y - yy, 2) < Math.pow(.4, 2)) {
        return [xx, yy];
      }
    };

    BoardCanvas.prototype.render = function(stones) {
      var _i, _ref, _results,
        _this = this;

      this.ctx.lineCap = 'round';
      this.ctx.lineJoin = 'round';
      this.ctx.lineWidth = .5;
      this.ctx.clearRect(0, 0, this.size, this.size);
      this.ctx.fillStyle = this.BACKGROUND;
      this.ctx.fillRect(0, 0, this.size, this.size);
      this.ctx.fillStyle = this.ctx.strokeStyle = this.LINE_COLOR;
      _.each((function() {
        _results = [];
        for (var _i = 0, _ref = this.LINES - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this), function(n) {
        _this.ctx.moveTo(_this.locate(n) + .5, _this.locate(0));
        _this.ctx.lineTo(_this.locate(n) + .5, _this.locate(_this.LINES - 1));
        _this.ctx.stroke();
        _this.ctx.moveTo(_this.locate(0), _this.locate(n) + .5);
        _this.ctx.lineTo(_this.locate(_this.LINES - 1), _this.locate(n) + .5);
        return _this.ctx.stroke();
      });
      _.each([[3, 3], [3, 9], [3, 15], [9, 9], [9, 3], [9, 15], [15, 3], [15, 9], [15, 15]], function(x) {
        return _this.circle(_this.locate(x[0]), _this.locate(x[1]), _this.NINE_POINTS_RADIUS, _this.NINE_POINTS_COLOR);
      });
      if (stones) {
        return this.draw_stones(stones);
      } else if (this.stones) {
        return this.draw_stones(this.stones);
      }
    };

    BoardCanvas.prototype.draw_stones = function(stones) {
      var last,
        _this = this;

      _.each(stones, function(s) {
        if (!s.repealed) {
          return _this.circle(_this.locate(s.pos[0]), _this.locate(s.pos[1]), _this.STONE_RADIUS, (s.player === 'black' ? _this.black : _this.white), (s.player === 'black' ? _this.black_border : _this.white_border));
        }
      });
      if (last = stones[stones.length - 1]) {
        return this.circle(this.locate(last.pos[0]), this.locate(last.pos[1]), this.STONE_RADIUS * .75, null, (last.player === 'black' ? this.white : this.black));
      }
    };

    return BoardCanvas;

  })();

}).call(this);
