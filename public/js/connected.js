// Generated by CoffeeScript 1.6.2
(function() {
  var check_tap_enalbed, gid, tap_enabled, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (!(gid = (_ref = /game\/(.+)$/.exec(location.pathname)) != null ? _ref[1] : void 0)) {
    return;
  }

  tap_enabled = false;

  check_tap_enalbed = function(e) {
    if (e.type === 'tap') {
      tap_enabled = true;
    }
    return tap_enabled && e.type === 'click';
  };

  $.get("/json/connected/" + gid, function(data) {
    console.log(data);
    init_header(data);
    return $(function() {
      var BackBtn, BeginningBtn, BoardView, BulletinLocalView, BulletinView, Comment, CommentChartList, CommentList, CommentPublishView, CommentView, CommentsView, EndingBtn, ForwardBtn, Game, Regiment, RegimentList, RegimentView, ShowNumBtn, Stone, StoneList, StoneView, TryBtn, back_btn, beginning_btn, board, bulletin, bulletin_local, comment_chart_list, comment_list, comment_publish, comments, ending_btn, forward_btn, game, regiment_list, show_num_btn, stone_list, try_btn;

      Stone = Backbone.Model.extend({
        defaults: {
          show_num: false,
          last: true
        },
        initialize: function() {
          var _this = this;

          return this.on('remove_from_board', function() {
            return _this.clear({
              silent: true
            });
          });
        }
      });
      StoneList = Backbone.Collection.extend({
        model: Stone,
        initialize: function() {
          var _this = this;

          this.on('reset', function(models, options) {
            _.each(options.previousModels, function(s) {
              return s.trigger('remove_from_board');
            });
            return _.each(models.initial(), function(x) {
              return x.set('last', false);
            });
          });
          this.on('add', function(model, collection) {
            var _ref1;

            model.set('last', true);
            return (_ref1 = _this.at(_this.length - 2)) != null ? _ref1.set('last', false) : void 0;
          });
          return this.on('remove', function(model, collection) {
            var _ref1;

            if ((_ref1 = _this.at(_this.length - 1)) != null) {
              _ref1.set('last', true);
            }
            return model.trigger('remove_from_board');
          });
        }
      });
      stone_list = new StoneList;
      Game = Backbone.Model.extend({
        idAttribute: 'n',
        defaults: function() {
          return _.defaults(data.game, {
            show_num: false,
            connected: false,
            show_first_n_stones: null
          });
        },
        myself: function() {
          return data.myself;
        },
        is_player: function() {
          var _ref1;

          return this.myself() && this.get('players') && (_ref1 = this.myself(), __indexOf.call(this.get('players'), _ref1) >= 0);
        },
        my_role: function() {
          if (this.is_player() && this.get('seats')) {
            return _.invert(this.get('seats'))[this.myself()];
          }
        },
        opponent: function() {
          if (this.is_player()) {
            return _.without(this.get('players'), this.myself())[0];
          }
        },
        connect: function(cb) {
          var init_socket,
            _this = this;

          this.socket = io.connect("http://" + location.hostname + "/weiqi");
          _.each('connect_failed reconnect_failed error connecting reconnecting reconnect disconnect'.split(' '), function(x) {
            return _this.socket.on(x, function() {
              return _this.trigger(x);
            });
          });
          init_socket = function(cb) {
            var _ref1;

            return _this.socket.emit('auth', (_ref1 = cookie.get('auth')) != null ? _ref1 : 'anonymous', function(res) {
              _this.socket.emit('room', _this.get('id'));
              console.log(res);
              _this.set('connected', true);
              _this.trigger('connected');
              return typeof cb === "function" ? cb() : void 0;
            });
          };
          this.socket.on('disconnect', function() {
            return _this.set('connected', false);
          });
          this.socket.on('reconnect', function() {
            return init_socket();
          });
          return init_socket(function() {
            _this.socket.on('move', function(next, step, taken) {
              return _this.move(next, step, taken);
            });
            _this.socket.on('retract', function(uid) {
              console.log('retract ' + uid);
              return _this.retract(true);
            });
            _this.socket.on('call_finishing', function(msg) {
              var analysis, stone_in_regiment, suggest;

              switch (msg) {
                case 'ask':
                  return _this.trigger('call_finishing_ask_received');
                case 'cancel':
                  return _this.trigger('call_finishing_cancel_received');
                case 'reject':
                  return _this.trigger('call_finishing_reject_received');
                case 'accept':
                  msg = arguments[0], analysis = arguments[1];
                  return _this.trigger('call_finishing_accept_received', analysis);
                case 'stop':
                  _this.unset('calling_finishing');
                  return _this.trigger('call_finishing_stop_received');
                case 'suggest':
                  msg = arguments[0], stone_in_regiment = arguments[1], suggest = arguments[2];
                  return _this.trigger('call_finishing_suggest_received', stone_in_regiment, suggest);
              }
            });
            _this.socket.on('comment', function(c) {
              return _this.trigger('comment', c);
            });
            return typeof cb === "function" ? cb() : void 0;
          });
        },
        test_connection: function(cb) {
          if (this.get('connected')) {
            return cb();
          } else {
            return this.connect(cb);
          }
        },
        move: function() {
          var next, step, taken,
            _this = this;

          switch (arguments.length) {
            case 1:
              step = arguments[0];
              return this.test_connection(function(err) {
                var _ref1;

                return (_ref1 = _this.socket) != null ? _ref1.emit('move', step, function(res) {
                  console.log('move: ' + JSON.stringify(res));
                  if (res.fail) {
                    return console.log('fail');
                  } else {
                    return _this.move(res.next, res.step, res.taken);
                  }
                }) : void 0;
              });
            case 3:
              next = arguments[0], step = arguments[1], taken = arguments[2];
              if (next) {
                this.set('next', next);
              }
              stone_list.add(step);
              stone_list.chain().filter(function(x) {
                var _ref1;

                return _ref1 = x.get('n'), __indexOf.call(taken, _ref1) >= 0;
              }).each(function(x) {
                return x.set('repealed', step.n);
              });
              return stone_list.last().set('show_num', game.get('show_num'));
          }
        },
        retract: function(direct) {
          var stone, _ref1,
            _this = this;

          if (direct == null) {
            direct = false;
          }
          if (direct) {
            if (stone = stone_list.pop()) {
              stone.trigger('retract');
              stone_list.chain().filter(function(x) {
                return x.get('repealed') === stone.get('n');
              }).each(function(x) {
                return x.unset('repealed');
              });
              game.set('next', stone.get('player'), {
                silent: true
              });
              return this.trigger('retract', stone);
            }
          } else {
            if (this.is_player() && this.my_role() === ((_ref1 = stone_list.last()) != null ? _ref1.get('player') : void 0)) {
              return this.test_connection(function() {
                return _this.socket.emit('retract', function(data) {
                  if (data === 'success') {
                    console.log('retract');
                    return _this.retract(true);
                  }
                });
              });
            }
          }
        },
        call_finishing_ask: function() {
          var _this = this;

          return this.test_connection(function() {
            return _this.socket.emit('call_finishing', 'ask', function() {
              return _this.trigger('call_finishing_ask');
            });
          });
        },
        call_finishing_cancel: function() {
          var _this = this;

          return this.test_connection(function() {
            return _this.socket.emit('call_finishing', 'cancel', function() {
              return _this.trigger('call_finishing_cancel');
            });
          });
        },
        call_finishing_reject: function() {
          var _this = this;

          return this.test_connection(function() {
            return _this.socket.emit('call_finishing', 'reject', function() {
              return _this.trigger('call_finishing_reject');
            });
          });
        },
        call_finishing_accept: function() {
          var _this = this;

          return this.test_connection(function() {
            return _this.socket.emit('call_finishing', 'accept', function(analysis) {
              return _this.trigger('call_finishing_accept', analysis);
            });
          });
        },
        call_finishing_stop: function() {
          var _this = this;

          return this.test_connection(function() {
            return _this.socket.emit('call_finishing', 'stop', function(analysis) {
              _this.unset('calling_finishing');
              return _this.trigger('call_finishing_stop');
            });
          });
        },
        call_finishing_suggest: function(stone_in_regiment, suggest, cb) {
          var _this = this;

          return this.test_connection(function() {
            return _this.socket.emit('call_finishing', 'suggest', stone_in_regiment, suggest, cb);
          });
        },
        initialize: function() {
          var _this = this;

          this.on('change:show_num', function(m, v) {
            return stone_list.each(function(x) {
              return x.set('show_num', v);
            });
          });
          this.on('call_finishing_accept', function(analysis) {
            return _this.set('analysis', analysis);
          });
          this.on('call_finishing_accept_received', function(analysis) {
            return _this.set('analysis', analysis);
          });
          return this.on('change:show_first_n_stones', function(m, v) {
            var _ref1;

            if (v == null) {
              v = (_ref1 = stone_list.last()) != null ? _ref1.get('n') : void 0;
            }
            if (v == null) {
              return;
            }
            return stone_list.each(function(x) {
              if (x.get('n') > v) {
                if (!x.get('hide')) {
                  x.set('hide', true);
                }
              } else if (x.get('repealed')) {
                if (x.get('repealed') <= v) {
                  x.set('hide', true);
                } else {
                  x.set('hide', false);
                }
              } else {
                x.set('hide', false);
              }
              if (x.get('n') < v) {
                return x.set('last', false);
              } else if (x.get('n') === v) {
                return x.set('last', true);
              }
            });
          });
        },
        send_comment: function(c) {
          var _this = this;

          return this.test_connection(function() {
            return _this.socket.emit('comment', data.game.id, c, function() {
              return _this.trigger('comment', c);
            });
          });
        },
        fetch_previous_comments: function(tag, step, start, num, cb) {
          var _this = this;

          return this.test_connection(function() {
            return _this.socket.emit('fetch_comment', data.game.id, tag, step, start, num, function(comments) {
              return cb(comments);
            });
          });
        },
        snapshot: function() {
          var from, _ref1;

          return _.extend({
            gid: this.get('id')
          }, game.get('try') ? (from = (_ref1 = _.find(game.get('stones_before_try'), function(x, i) {
            return !stone_list.at(i) || x.player !== stone_list.at(i).get('player') || x.pos.join(',') !== stone_list.at(i).get('pos').join(',');
          })) != null ? _ref1.n : void 0, from != null ? {
            from: from,
            moves: stone_list.chain().filter(function(s) {
              return s.get('n') >= from || s.get('repealed') >= from;
            }).map(function(s) {
              return _.pick(s.toJSON(), 'n', 'player', 'pos', 'repealed');
            }).value()
          } : {
            from: stone_list.length
          }) : {
            from: stone_list.length
          });
        }
      });
      game = new Game;
      Comment = Backbone.Model.extend({
        initialize: function() {}
      });
      CommentList = Backbone.Collection.extend({
        model: Comment,
        initialize: function() {
          var _this = this;

          return this.listenTo(game, 'comment', function(c) {
            return _this.add(c);
          });
        },
        comparator: function(c) {
          return -Number(c.get('step') + '' + c.get('ts'));
        }
      });
      comment_list = new CommentList;
      CommentView = Backbone.View.extend({
        events: {
          'click .del': 'del'
        },
        del: function() {
          return console.log('del');
        },
        render: function() {
          return tpl('#comment_tpl')({
            comment: this.model.toJSON(),
            data: data
          });
        }
      });
      CommentsView = Backbone.View.extend({
        el: $('#comments'),
        events: {
          'click a#previous_comments': 'fetch_previous_comments'
        },
        initialize: function() {
          var _this = this;

          this.listenTo(comment_list, 'reset', this.render);
          return this.listenTo(comment_list, 'add', function(model, collection) {
            return _this.$el.find('ul').append(new CommentView({
              model: model
            }).render());
          });
        },
        render: function() {
          var _this = this;

          comment_list.sort();
          return comment_list.each(function(c) {
            var div, _ref1;

            div = $(new CommentView({
              model: c
            }).render()).appendTo(_this.$el.find('ul'));
            if ((_ref1 = c.get('ss')) != null ? _ref1.length : void 0) {
              return _.each(c.get('ss'), function(x) {
                var moves, ss_div;

                ss_div = div.find("[name='" + x.name + "']");
                moves = data.refs[x.gid].moves.slice(0, x.from);
                if ((!moves || moves.length < x.from) && game.get('id') === ss.gid) {
                  moves = game.get('try') ? game.get('stones_before_try') : stone_list.map(function(s) {
                    return s.toJSON();
                  });
                  moves = moves.slice(0, x.from);
                }
                moves = _.chain(moves).reject(function(z) {
                  return _.find(x.moves, function(y) {
                    return z.n === y.n;
                  });
                }).union(x.moves).value();
                return new BoardCanvas(ss_div, {
                  size: 150
                }).render(moves);
              });
            }
          });
        },
        fetch_previous_comments: function() {
          var start, step;

          console.log('previous');
          step = stone_list.last().get('n');
          start = data.comments[step] ? data.comments[step].length : 1;
          return game.fetch_previous_comments('comments', step, start, 6, function(comments) {
            comments = comments[step];
            if (data.comments[step]) {
              comments = _.reject(comments, function(c) {
                return _.find(data.comments[step], function(cc) {
                  return c.author === cc.author && c.ts === cc.ts && c.text === cc.text;
                });
              });
              data.comments[step] = _.union(data.comments[step], comments);
            } else {
              data.comments[step];
            }
            return _.each(comments, function(c) {
              return comment_list.add(c);
            });
          });
        }
      });
      comments = new CommentsView;
      comment_list.reset(_.chain(data.comments).values().flatten().value());
      Regiment = Backbone.Model.extend({
        initialize: function() {
          var _this = this;

          if (this.get('suggests')) {
            if (this.get('suggests')[game.myself()]) {
              this.set('my_guess', this.get('suggests')[game.myself()]);
            }
            if (this.get('suggests')[game.opponent()]) {
              this.set('opponent_guess', this.get('suggests')[game.opponent()]);
            }
          }
          this.on('change:my_guess', this.guess);
          this.on('change:opponent_guess', this.guess);
          return this.listenTo(game, 'call_finishing_suggest_received', function(stone_in_regiment, suggest) {
            if (__indexOf.call(_this.get('stones'), stone_in_regiment) >= 0) {
              return _this.set('opponent_guess', suggest);
            }
          });
        },
        guess: function() {
          return this.set('judge', this.get('my_guess') === this.get('opponent_guess') && this.get('my_guess') ? this.get('my_guess') : this.get('my_guess') !== this.get('opponent_guess') && this.get('my_guess') && this.get('opponent_guess') ? 'disagree' : this.get('my_guess') || this.get('opponent_guess'));
        },
        status: function() {
          return this.get('judge') || this.get('guess');
        }
      });
      RegimentList = Backbone.Collection.extend({
        model: Regiment,
        initialize: function() {
          var tmp,
            _this = this;

          this.listenTo(game, 'call_finishing_accept', tmp = function(analysis) {
            return _this.reset(analysis);
          });
          return this.listenTo(game, 'call_finishing_accept_received', tmp);
        }
      });
      regiment_list = new RegimentList;
      StoneView = Backbone.View.extend({
        tagName: 'li',
        initialize: function() {
          var fn,
            _this = this;

          fn = function(m, v) {
            if (v) {
              return _this.$el.hide();
            } else {
              return _this.$el.show();
            }
          };
          this.listenTo(this.model, 'change:repealed', fn);
          this.listenTo(this.model, 'change:hide', fn);
          this.listenTo(this.model, 'change:show_num', function(m, v) {
            if (v) {
              return _this.$el.addClass('show_num');
            } else {
              return _this.$el.removeClass('show_num');
            }
          });
          this.listenTo(this.model, 'retract', this.remove);
          this.listenTo(this.model, 'change:last', this.change_last);
          this.listenTo(this.model, 'change:style', this.change_style);
          this.listenTo(this.model, 'clear_style', this.clear_style);
          return this.listenTo(this.model, 'remove_from_board', this.remove);
        },
        render: function() {
          this.$el.html(this.model.get('n')).addClass(this.model.get('player')).attr({
            n: this.model.get('n'),
            x: this.model.get('pos')[0],
            y: this.model.get('pos')[1]
          });
          if (this.model.get('last')) {
            this.$el.addClass('last');
          }
          if (this.model.get('repealed')) {
            this.$el.hide();
          }
          return this;
        },
        change_last: function(m, v) {
          if (v) {
            return this.$el.addClass('last');
          } else {
            return this.$el.removeClass('last');
          }
        },
        clear_style: function() {
          return this.$el.removeClass('dead live disagree selected');
        },
        change_style: function(m, v) {
          if (v) {
            return this.clear_style().addClass(v);
          } else {
            return this.clear_style();
          }
        }
      });
      BackBtn = Backbone.View.extend({
        el: $('#buttons #back'),
        initialize: function() {
          this.listenTo(stone_list, 'reset', this.render);
          return this.listenTo(game, 'change:show_first_n_stones', this.render);
        },
        events: {
          click: 'click',
          tap: 'click'
        },
        click: function(e) {
          var n, _ref1;

          if (check_tap_enalbed(e)) {
            return;
          }
          if (this.$el.hasClass('invalid')) {
            return;
          }
          n = game.get('show_first_n_stones');
          if (n == null) {
            n = (_ref1 = stone_list.last()) != null ? _ref1.get('n') : void 0;
          }
          if (n) {
            game.set('show_first_n_stones', n - 1);
            if (game.get('try')) {
              return game.set('next_trying', stone_list.find(function(x) {
                return x.get('n') === n;
              }).get('player'));
            }
          }
        },
        render: function() {
          var n;

          n = game.get('show_first_n_stones');
          if (n && n > 0 || n === null && stone_list.length > 1) {
            this.$el.removeClass('invalid');
          } else {
            this.$el.addClass('invalid');
          }
          return this;
        }
      });
      back_btn = new BackBtn().render();
      ForwardBtn = Backbone.View.extend({
        el: $('#buttons #forward'),
        initialize: function() {
          this.listenTo(stone_list, 'reset', this.render);
          return this.listenTo(game, 'change:show_first_n_stones', this.render);
        },
        events: {
          click: 'click',
          tap: 'click'
        },
        click: function(e) {
          var n, _ref1;

          if (check_tap_enalbed(e)) {
            return;
          }
          if (this.$el.hasClass('invalid')) {
            return;
          }
          n = game.get('show_first_n_stones');
          if (n >= 0) {
            if (n + 1 < ((_ref1 = stone_list.last()) != null ? _ref1.get('n') : void 0)) {
              game.set('show_first_n_stones', n + 1);
              if (game.get('try')) {
                return game.set('next_trying', (stone_list.find(function(s) {
                  return s.get('n') === n + 1;
                }).get('player') === 'black' ? 'white' : 'black'));
              }
            } else {
              game.set('show_first_n_stones', null);
              if (game.get('try')) {
                return game.set('next_trying', (stone_list.last().get('player') === 'black' ? 'white' : 'black'));
              }
            }
          }
        },
        render: function() {
          var n, _ref1;

          n = game.get('show_first_n_stones');
          if (n !== null && n >= 0 && n < ((_ref1 = stone_list.last()) != null ? _ref1.get('n') : void 0)) {
            this.$el.removeClass('invalid');
          } else {
            this.$el.addClass('invalid');
          }
          return this;
        }
      });
      forward_btn = new ForwardBtn().render();
      BeginningBtn = Backbone.View.extend({
        el: $('#buttons #beginning'),
        initialize: function() {
          this.listenTo(stone_list, 'reset', this.render);
          return this.listenTo(game, 'change:show_first_n_stones', this.render);
        },
        events: {
          click: 'click',
          tap: 'click'
        },
        click: function(e) {
          if (check_tap_enalbed(e)) {
            return;
          }
          if (this.$el.hasClass('invalid')) {
            return;
          }
          game.set('show_first_n_stones', 0);
          if (game.get('try')) {
            return game.set('next_trying', (stone_list.first().get('player') === 'black' ? 'white' : 'black'));
          }
        },
        render: function() {
          if (stone_list.length > 1 && (game.get('show_first_n_stones') === null || game.get('show_first_n_stones') > 0)) {
            this.$el.removeClass('invalid');
          } else {
            this.$el.addClass('invalid');
          }
          return this;
        }
      });
      beginning_btn = new BeginningBtn().render();
      EndingBtn = Backbone.View.extend({
        el: $('#buttons #ending'),
        initialize: function() {
          this.listenTo(stone_list, 'reset', this.render);
          return this.listenTo(game, 'change:show_first_n_stones', this.render);
        },
        events: {
          click: 'click',
          tap: 'click'
        },
        click: function(e) {
          if (check_tap_enalbed(e)) {
            return;
          }
          if (this.$el.hasClass('invalid')) {
            return;
          }
          game.set('show_first_n_stones', null);
          if (game.get('try')) {
            return game.set('next_trying', (stone_list.last().get('player') === 'black' ? 'white' : 'black'));
          }
        },
        render: function() {
          var n, _ref1;

          n = game.get('show_first_n_stones');
          if (n !== null && n >= 0 && n < ((_ref1 = stone_list.last()) != null ? _ref1.get('n') : void 0)) {
            this.$el.removeClass('invalid');
          } else {
            this.$el.addClass('invalid');
          }
          return this;
        }
      });
      ending_btn = new EndingBtn().render();
      BoardView = Backbone.View.extend({
        el: $('#gaming-board'),
        initialize: function() {
          this.listenTo(stone_list, 'add', this.add_stone);
          this.listenTo(stone_list, 'reset', this.reset_stones);
          this.listenTo(game, 'change:next', this.next_player);
          this.listenTo(regiment_list, 'reset', this.show_analysis);
          this.listenTo(game, 'call_finishing_stop', this.clear_style);
          return this.listenTo(game, 'call_finishing_stop_received', this.clear_style);
        },
        events: {
          'click canvas': 'click_board',
          'tap canvas': 'click_board'
        },
        reset_stones: function(stones, options) {
          var _this = this;

          return _.each(stones.models, function(s) {
            return _this.add_stone(s);
          });
        },
        add_stone: function(stone) {
          var t, view;

          view = new StoneView({
            model: stone
          });
          t = view.render().$el;
          this.stones.append(t);
          return t.css({
            left: this.board_canvas.locate(stone.get('pos')[0]) + .5 + this.$el.offset().left - t.width() / 2,
            top: this.board_canvas.locate(stone.get('pos')[1]) + .5 + this.$el.offset().top - t.height() / 2
          });
        },
        show_analysis: function() {
          return stone_list.each(function(s) {
            var tmp;

            if (!s.get('repealed')) {
              tmp = _.find(regiment_list.models, function(x) {
                var _ref1;

                return _ref1 = s.get('n'), __indexOf.call(x.get('stones'), _ref1) >= 0;
              });
              return s.set('style', tmp.get('judge') || tmp.get('guess'));
            }
          });
        },
        click_board: function(e) {
          var offset, pos, _ref1, _ref2, _ref3, _ref4;

          if (check_tap_enalbed(e)) {
            return;
          }
          if (game.get('show_first_n_stones') && !game.get('try')) {
            return forward_btn.click();
          } else if (game.is_player() && ((_ref1 = game.get('calling_finishing')) != null ? _ref1.msg : void 0) === 'accept') {
            return this.show_analysis();
          } else if (e.button === 0) {
            offset = $(e.target).offset();
            pos = this.board_canvas.position([(_ref2 = e.offsetX) != null ? _ref2 : e.pageX - offset.left - .5, (_ref3 = e.offsetY) != null ? _ref3 : e.pageY - offset.top - .5]);
            if (!pos) {
              return;
            }
            if (game.get('try')) {
              return this.trying(pos);
            } else if (game.get('players') && (_ref4 = game.myself(), __indexOf.call(game.get('players'), _ref4) >= 0)) {
              if (game.get('status') === 'started') {
                return game.move({
                  pos: pos,
                  player: game.my_role()
                });
              }
            }
          }
        },
        trying: function(pos) {
          var e, rlt, show_first_n_stones, step, taken;

          if (((show_first_n_stones = game.get('show_first_n_stones')) != null) && show_first_n_stones >= 0) {
            while (stone_list.last().get('n') > show_first_n_stones) {
              stone_list.pop();
            }
            game.set('show_first_n_stones', null);
          }
          step = {
            pos: pos,
            player: game.get('next_trying') || game.get('next')
          };
          try {
            rlt = move_step(stone_list.map(function(s) {
              return s.toJSON();
            }), step);
          } catch (_error) {
            e = _error;
            return console.log(e.message);
          }
          if (rlt) {
            taken = _.chain(rlt).pluck('block').flatten().pluck('n').value();
            stone_list.chain().filter(function(s) {
              var _ref1;

              return _ref1 = s.get('n'), __indexOf.call(taken, _ref1) >= 0;
            }).each(function(s) {
              return s.set('repealed', step.n);
            });
          }
          stone_list.add(step);
          return game.set('next_trying', (step.player === 'black' ? 'white' : 'black'));
        },
        next_player: function(model, player) {
          if (game.my_role() === player) {
            return this.$el.addClass('your_turn');
          } else {
            return this.$el.removeClass('your_turn');
          }
        },
        clear_style: function() {
          return stone_list.each(function(s) {
            if (!s.get('repealed')) {
              return s.trigger('clear_style');
            }
          });
        },
        render: function() {
          var size;

          this.$el.height(size = this.$el.width());
          this.canvas = $('<canvas></canvas>').appendTo(this.$el).attr({
            width: size,
            height: size
          });
          this.board_canvas = new BoardCanvas(this.canvas, {
            size: size,
            MARGIN: 20,
            NINE_POINTS_RADIUS: 3,
            black: '#0f1926',
            white: '#fffcf7'
          });
          this.board_canvas.render();
          this.stones = $('<ul class="stones"></ul>').appendTo(this.$el);
          return this;
        }
      });
      board = new BoardView().render();
      RegimentView = Backbone.View.extend({
        initialize: function() {
          this.listenTo(this.model, 'change:judge', this.change_judge);
          this.listenTo(this.model, 'change:my_guess', this.render);
          return this.listenTo(this.model, 'change:opponent_guess', this.render);
        },
        events: {
          'click': 'select_regiment',
          'tap': 'select_regiment',
          'click .guess a': 'guess',
          'tap .guess a': 'guess'
        },
        select_regiment: function(e) {
          var _this = this;

          if (check_tap_enalbed(e)) {
            return;
          }
          return stone_list.each(function(s) {
            var _ref1;

            if (!s.get('repealed')) {
              return s.set('style', ((_ref1 = s.get('n'), __indexOf.call(_this.model.get('stones'), _ref1) >= 0) ? "selected " + (_this.model.status()) : false));
            }
          });
        },
        change_judge: function(model, v) {
          this.render();
          if ($("ul.stones li[n='" + (this.model.get('stones')[0]) + "']").hasClass('selected')) {
            return this.select_regiment();
          } else {
            return board.show_analysis();
          }
        },
        guess: function(e) {
          var g,
            _this = this;

          if (check_tap_enalbed(e)) {
            return;
          }
          if ($(e.target).hasClass('selected')) {
            return;
          }
          g = $(e.target).attr('value');
          return game.call_finishing_suggest(this.model.get('stones')[0], g, function() {
            return _this.model.set('my_guess', g);
          });
        },
        render: function() {
          if (!this.model.get('suggests')) {
            this.$el.find(".guess a[value='" + (this.model.get('guess')) + "']").addClass('default');
          }
          if (this.model.get('my_guess')) {
            this.$el.find('.guess a').removeClass('selected default');
            this.$el.find(".guess a[value='" + (this.model.get('my_guess')) + "']").addClass('selected');
          }
          if (this.model.get('opponent_guess')) {
            this.$el.find('.guess a').removeClass('opponent-selected default');
            this.$el.find(".guess a[value='" + (this.model.get('opponent_guess')) + "']").addClass('opponent-selected');
          }
          if (this.model.get('judge') === 'disagree') {
            this.$el.addClass('disagree');
          } else {
            this.$el.removeClass('disagree');
          }
          return this;
        }
      });
      BulletinView = Backbone.View.extend({
        el: $('#bulletin'),
        initialize: function() {
          var _this = this;

          this.listenTo(game, 'change:next', this.next_player);
          _.chain({
            connect_failed: 'connect_failed',
            reconnect_failed: 'connect_failed',
            error: 'connect_failed',
            connecting: 'connecting',
            reconnecting: 'connecting',
            disconnect: 'disconnect',
            connected: 'connected',
            reconnect: 'reconnect'
          }).pairs().each(function(x) {
            return _this.listenTo(game, x[0], function() {
              var _ref1;

              _this.$el.find('.conn').remove();
              _this.$el.children().hide();
              if (_this.find_tpl(x[1])) {
                _this.$el.append(_this.find_tpl(x[1])());
              }
              if ((_ref1 = x[1]) === 'connected' || _ref1 === 'reconnect') {
                return _.delay(function() {
                  if (_this.$el.children().length > 1) {
                    _this.$el.find('.conn').remove();
                    return _this.$el.children().show();
                  }
                }, 3 * 1000);
              }
            });
          });
          this.listenTo(game, 'retract', this.retract);
          this.listenTo(game, 'call_finishing_ask', this.call_finishing_ask);
          this.listenTo(game, 'call_finishing_ask_received', this.call_finishing_ask_received);
          this.listenTo(regiment_list, 'reset', this.show_analysis);
          this.listenTo(game, 'call_finishing_stop', function() {
            if (game.is_player()) {
              if (game.my_role() === game.get('next')) {
                return _this.show_tpl('call_finishing_stop_move');
              } else {
                return _this.show_tpl('call_finishing_stop_wait');
              }
            }
          });
          this.listenTo(game, 'call_finishing_stop_received', function() {
            if (game.is_player()) {
              if (game.my_role() === game.get('next')) {
                return _this.show_tpl('call_finishing_stop_received_move');
              } else {
                return _this.show_tpl('call_finishing_stop_received_wait');
              }
            }
          });
          _.chain({
            call_finishing_cancel: 'started_please_move',
            call_finishing_cancel_received: 'call_finishing_cancel_received',
            call_finishing_reject: 'call_finishing_reject',
            call_finishing_reject_received: 'call_finishing_reject_received'
          }).pairs().each(function(x) {
            return _this.listenTo(game, x[0], function() {
              return _this.show_tpl(x[1]);
            });
          });
          this.listenTo(game, 'change:try', function(m, v) {
            if (v) {
              return _this.$el.hide();
            } else {
              return _this.$el.show();
            }
          });
          return this.listenTo(regiment_list, 'change:judge', this.show_analysis_confirm);
        },
        call_finishing_ask: function() {
          var _this = this;

          this.show_tpl('call_finishing_ask');
          return this.$el.find('#call_finishing_cancel').click(function() {
            return game.call_finishing_cancel();
          });
        },
        call_finishing_ask_received: function() {
          var _this = this;

          this.show_tpl('call_finishing_ask_received');
          this.$el.find('#reject_calling_finishing').click(function() {
            return game.call_finishing_reject();
          });
          return this.$el.find('#accept_calling_finishing').click(function() {
            return game.call_finishing_accept();
          });
        },
        show_analysis: function(regiment_list) {
          var regiment_tpl,
            _this = this;

          this.show_tpl('call_finishing_accept');
          this.$el.find('#stop_calling_finishing').click(function() {
            return game.call_finishing_stop();
          });
          regiment_tpl = tpl('#bulletin-tpls #regiment-tpl');
          regiment_list.each(function(x) {
            return new RegimentView({
              model: x,
              el: $(regiment_tpl({
                data: x.toJSON(),
                opponent: game.opponent(),
                myself: game.myself()
              })).appendTo(_this.$el.find('#regiments'))
            }).render();
          });
          return this.show_analysis_confirm();
        },
        show_analysis_confirm: function() {
          if (regiment_list.some(function(x) {
            return x.get('judge') === 'disagree';
          })) {
            return this.$el.find('#confirm').hide();
          } else {
            return this.$el.find('#confirm').show();
          }
        },
        find_tpl: function(name) {
          var _base, _ref1, _ref2;

          if ((_ref1 = this.tpls) == null) {
            this.tpls = {};
          }
          return (_ref2 = (_base = this.tpls)[name]) != null ? _ref2 : _base[name] = tpl("#bulletin-tpls script[name='" + name + "']");
        },
        show_tpl: function(name) {
          if (this.find_tpl(name)) {
            return this.$el.empty().append(this.find_tpl(name)({
              data: data
            }));
          }
        },
        next_player: function(model, player) {
          if (game.is_player()) {
            if (game.my_role() === player) {
              this.show_tpl('started_please_move');
              return $('#call-finishing').click(function() {
                return game.call_finishing_ask();
              });
            } else {
              this.show_tpl('started_please_wait');
              return $('#retract').click(function() {
                return game.retract();
              });
            }
          }
        },
        retract: function(stone) {
          if (game.is_player()) {
            if (game.my_role() === stone.get('player')) {
              this.show_tpl('started_please_move');
            } else {
              this.show_tpl('retract_by_opponent');
            }
          }
          return console.log('on retract');
        }
      });
      bulletin = new BulletinView().render();
      BulletinLocalView = Backbone.View.extend({
        el: $('#bulletin-local'),
        initialize: function() {
          var _this = this;

          if (!game.get('try')) {
            this.$el.hide();
          }
          this.listenTo(game, 'change:try', function(m, v) {
            if (v) {
              _this.$el.show();
              return _this.show_tpl('start_trying', {
                next: game.get('next')
              });
            } else {
              return _this.$el.hide();
            }
          });
          return this.listenTo(game, 'change:next', function(m, v) {
            return _this.show_tpl('start_trying', {
              next: v
            });
          });
        },
        show_tpl: function(name, params) {
          params = params ? _.defaults(params, {
            data: data
          }) : {
            data: data
          };
          return this.$el.empty().append(tpl("#bulletin-local-tpls script[name='" + name + "']")(params));
        }
      });
      bulletin_local = new BulletinLocalView;
      ShowNumBtn = Backbone.View.extend({
        el: $('#buttons #num_btn'),
        events: {
          click: 'show_num',
          tap: 'show_num'
        },
        show_num: function(e) {
          if (check_tap_enalbed(e)) {
            return;
          }
          this.$el.toggleClass('show_num');
          return game.set('show_num', !this.$el.hasClass('show_num'));
        },
        render: function() {
          return this.$el.addClass('show_num');
        }
      });
      show_num_btn = new ShowNumBtn().render();
      TryBtn = Backbone.View.extend({
        el: $('#try'),
        events: {
          click: 'click'
        },
        click: function(e) {
          this.$el.toggleClass('trying');
          game.set('try', !game.get('try'));
          if (this.$el.hasClass('trying')) {
            this.$el.find('span').text(this.$el.attr('try_done_btn'));
            return game.set('stones_before_try', stone_list.map(function(s) {
              return s.toJSON();
            }));
          } else {
            this.$el.find('span').text(this.$el.attr('try_btn'));
            stone_list.reset(game.get('stones_before_try'));
            return game.unset('next_trying');
          }
        }
      });
      try_btn = new TryBtn;
      stone_list.reset(game.get('moves'));
      game.trigger('change:next', game, game.get('next'));
      game.connect(function(err) {
        var cf;

        if (err) {
          return;
        }
        if (game.is_player() && (cf = game.get('calling_finishing'))) {
          switch (cf.msg) {
            case 'ask':
              if (cf.uid === game.myself()) {
                return game.trigger('call_finishing_ask');
              } else {
                return game.trigger('call_finishing_ask_received');
              }
              break;
            case 'accept':
              if (cf.uid === game.myself()) {
                return game.trigger('call_finishing_accept', game.get('analysis'));
              } else {
                return game.trigger('call_finishing_accept_received', game.get('analysis'));
              }
          }
        }
      });
      $(window).on('resize', function() {});
      if (data.myself) {
        $('aside').append(tpl('#publish_tpl')());
        CommentChartList = Backbone.Collection.extend({
          model: Backbone.Model
        });
        comment_chart_list = new CommentChartList;
        CommentPublishView = Backbone.View.extend({
          el: $('#pub'),
          initialize: function() {
            var _this = this;

            this.listenTo(comment_chart_list, 'add', function(ss) {
              return _this.render_chart(ss);
            });
            return this.listenTo(comment_chart_list, 'remove', this.remove_chart);
          },
          events: {
            'click #submit': 'submit',
            'click #add_chart': 'add_chart',
            'focus textarea': 'start_commenting'
          },
          start_commenting: function() {
            return console.log('start_commenting');
          },
          submit: function(e) {
            var comment, text;

            text = this.$el.find('textarea').val();
            if (!text || text === '') {
              return;
            }
            comment = {
              step: stone_list.last().get('n'),
              text: text
            };
            if (comment_chart_list.length) {
              comment.ss = comment_chart_list.map(function(x) {
                return x.toJSON();
              });
            }
            console.log(comment);
            return game.send_comment(comment);
          },
          add_chart: function(e) {
            var idx, ss;

            ss = game.snapshot();
            idx = this.$el.find('#ss .ss').length + 1;
            ss.name = "[" + idx + "]";
            comment_chart_list.add(ss);
            return this.$el.find('textarea').val(this.$el.find('textarea').val() + ss.name);
          },
          render_chart: function(ss) {
            var div, moves;

            moves = data.refs[ss.get('gid')].moves.slice(0, ss.get('from'));
            if ((!moves || moves.length < ss.get('from')) && game.get('id') === ss.get('gid')) {
              moves = game.get('try') ? game.get('stones_before_try') : stone_list.map(function(s) {
                return s.toJSON();
              });
              moves = moves.slice(0, ss.get('from'));
            }
            moves = _.chain(moves).reject(function(x) {
              return _.find(ss.get('moves'), function(y) {
                return x.n === y.n;
              });
            }).union(ss.get('moves')).value();
            div = $("<div class='ss'></div>").appendTo(this.$el.find('#ss')).data('ss', ss).click(function() {
              return comment_chart_list.remove($(this).data('ss'));
            });
            return new BoardCanvas(div, {
              size: 150
            }).render(moves);
          },
          remove_chart: function(ss) {
            var _ref1;

            if ((_ref1 = $(_.find(this.$el.find('#ss .ss').toArray(), function(x) {
              return $(x).data('ss') === ss;
            }))) != null) {
              _ref1.remove();
            }
            return this.$el.find('textarea').val(this.$el.find('textarea').val().replace(ss.get('name'), ''));
          }
        });
        comment_publish = new CommentPublishView;
        return;
        return _.delay(function() {
          comment_publish.$el.find('textarea').val('test: ');
          $('#try').click();
          $('#back').click();
          $('#back').click();
          board.trying([0, 17]);
          board.trying([0, 18]);
          $('#add_chart').click();
          board.trying([1, 18]);
          $('#back').click();
          board.trying([1, 17]);
          $('#add_chart').click();
          $('#ss .ss').first().click();
          console.log(comment_publish.$el.find('textarea').val());
          return comment_publish.$el.find('#submit').click();
        }, 2000);
      }
    });
  });

}).call(this);
