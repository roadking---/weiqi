// Generated by CoffeeScript 1.6.2
(function() {
  var BasicBoard, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BasicBoard = (function() {
    function BasicBoard(board, opts) {
      var _ref, _ref1;

      this.board = board;
      this.opts = opts;
      this.opts = _.defaults((_ref = this.opts) != null ? _ref : {}, {
        size: 600,
        margin: 20,
        NINE_POINTS_RADIUS: 3,
        PAWN_RADIUS: 12
      });
      this.LINES = 19;
      this.initial = (_ref1 = this.board.data('game')) != null ? _ref1 : JSON.parse(this.board.attr('game'));
      this.change_to_next(this.board.attr('next'));
      this.board.data('data', this);
    }

    BasicBoard.prototype.locate = function(n) {
      return Math.round(this.opts.margin + this.interval * n);
    };

    BasicBoard.prototype.change_to_next = function(player) {
      this.initial.next = player;
      this.board.attr('next', player);
      this.board.find(".players .next").removeClass('next');
      return this.board.find(".players ." + player).addClass('next');
    };

    BasicBoard.prototype.redraw = function() {};

    return BasicBoard;

  })();

  window.CanvasBoard = (function(_super) {
    __extends(CanvasBoard, _super);

    function CanvasBoard(board, opts) {
      var _base, _ref,
        _this = this;

      this.board = board;
      this.opts = opts;
      CanvasBoard.__super__.constructor.call(this, this.board, this.opts);
      if ((_ref = (_base = this.opts).click) == null) {
        _base.click = true;
      }
      this.canvas = this.board.find('canvas.draw');
      this.canvas.attr({
        width: this.opts.size,
        height: this.opts.size
      });
      this.canvas.css({
        width: this.opts.size,
        height: this.opts.size
      });
      this.interval = (this.canvas.height() - 2 * this.opts.margin) / (this.LINES - 1);
      this.ctx = this.canvas[0].getContext("2d");
      this.show_number = this.board.find('#num_btn i').hasClass('show-number');
      this.show_steps_to = null;
      if (this.opts.click) {
        this.canvas.click(function(e) {
          var offset, x, xx, y, yy, _ref1, _ref2, _ref3, _ref4;

          if (e.button === 0) {
            offset = $(e.target).offset();
            x = (_ref1 = e.offsetX) != null ? _ref1 : e.pageX - offset.left - .5;
            y = (_ref2 = e.offsetY) != null ? _ref2 : e.pageY - offset.top - .5;
            _ref3 = _.map([x, y], function(num) {
              return num = (num - _this.opts.margin) / _this.interval;
            }), x = _ref3[0], y = _ref3[1];
            _ref4 = _.map([x, y], function(num) {
              if (num < 0) {
                num = 0;
              }
              if (num > 18) {
                num = 18;
              }
              if (2 * num >= Math.ceil(num) + Math.floor(num)) {
                return Math.ceil(num);
              } else {
                return Math.floor(num);
              }
            }), xx = _ref4[0], yy = _ref4[1];
            if (Math.pow(x - xx, 2) + Math.pow(y - yy, 2) < Math.pow(.4, 2)) {
              return _this.on_click([xx, yy]);
            } else {
              return 1;
            }
          }
        });
      }
      this.redraw();
    }

    CanvasBoard.prototype.circle = function(x, y, radius, fill_color, stroke_color) {
      if (stroke_color == null) {
        stroke_color = 'black';
      }
      x += .5;
      y += .5;
      this.ctx.fillStyle = fill_color != null ? fill_color : 'black';
      this.ctx.strokeStyle = stroke_color;
      this.ctx.lineWidth = 1;
      this.ctx.beginPath();
      this.ctx.arc(x, y, radius, 0, Math.PI * 2, false);
      this.ctx.closePath();
      if (fill_color) {
        this.ctx.fill();
      }
      if (stroke_color) {
        return this.ctx.stroke();
      }
    };

    CanvasBoard.prototype.draw_pawn = function(pos, player, style) {
      var adjust;

      this.circle(this.locate(pos[0]), this.locate(pos[1]), this.opts.PAWN_RADIUS, player);
      if (style === 'wreath') {
        return this.circle(this.locate(pos[0]), this.locate(pos[1]), this.opts.PAWN_RADIUS * .75, null, (player === 'black' ? 'white' : 'black'));
      } else if (_.isObject(style) && style.text) {
        this.ctx.font = '12px Arial';
        this.ctx.strokeStyle = player === 'black' ? 'white' : 'black';
        if (_.isNumber(style.text)) {
          adjust = style.text < 10 ? [-3, 4] : [-7, 4];
        }
        return this.ctx.strokeText(style.text, this.locate(pos[0]) + adjust[0], this.locate(pos[1]) + adjust[1]);
      }
    };

    CanvasBoard.prototype.place = function(move) {
      var text;

      if (this.show_num) {
        text = move.n + 1;
      }
      if (text) {
        return this.draw_pawn(move.pos, move.player, {
          text: text
        });
      } else if (move.n === this.status_quo().step) {
        return this.draw_pawn(move.pos, move.player, 'wreath');
      } else {
        return this.draw_pawn(move.pos, move.player);
      }
    };

    CanvasBoard.prototype.draw_board = function() {
      var _i, _ref, _ref1, _ref2, _results,
        _this = this;

      this.ctx.lineCap = 'round';
      this.ctx.lineJoin = 'round';
      this.ctx.lineWidth = .5;
      this.ctx.clearRect(0, 0, this.opts.size, this.opts.size);
      this.ctx.fillStyle = (_ref = this.opts.BACKGROUND_COLOR) != null ? _ref : 'rgba(0, 0, 0, 0)';
      this.ctx.rect(0, 0, this.opts.size, this.opts.size);
      this.ctx.fill();
      this.ctx.fillStyle = this.ctx.strokeStyle = (_ref1 = this.opts.LINE_COLOR) != null ? _ref1 : 'black';
      this.ctx.rect(this.opts.margin, this.opts.margin, this.opts.size - 2 * this.opts.margin, this.opts.size - 2 * this.opts.margin);
      this.ctx.beginPath();
      _.each((function() {
        _results = [];
        for (var _i = 0, _ref2 = this.LINES - 1; 0 <= _ref2 ? _i <= _ref2 : _i >= _ref2; 0 <= _ref2 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this), function(n) {
        _this.ctx.moveTo(_this.locate(n) + .5, _this.locate(0));
        _this.ctx.lineTo(_this.locate(n) + .5, _this.locate(_this.LINES - 1));
        _this.ctx.stroke();
        _this.ctx.moveTo(_this.locate(0), _this.locate(n) + .5);
        _this.ctx.lineTo(_this.locate(_this.LINES - 1), _this.locate(n) + .5);
        return _this.ctx.stroke();
      });
      return _.each([[3, 3], [3, 9], [3, 15], [9, 9], [9, 3], [9, 15], [15, 3], [15, 9], [15, 15]], function(x) {
        return _this.circle(_this.locate(x[0]), _this.locate(x[1]), _this.opts.NINE_POINTS_RADIUS, 'black');
      });
    };

    CanvasBoard.prototype.status_quo = function() {
      var _ref;

      return {
        step: (_ref = this.show_steps_to) != null ? _ref : this.initial.moves.length - 1
      };
    };

    CanvasBoard.prototype.redraw = function() {
      var num, x, y,
        _this = this;

      switch (arguments.length) {
        case 0:
          this.ctx.fillStyle = 'white';
          this.ctx.fillRect(0, 0, this.opts.size, this.opts.size);
          this.draw_board();
          if (this.initial.moves) {
            num = this.status_quo().step;
            return _.each(this.initial.moves, function(x) {
              if (x.n <= num && (!x.repealed || x.repealed > num)) {
                return _this.place(x);
              }
            });
          }
          break;
        case 2:
          return x = arguments[0], y = arguments[1], arguments;
      }
    };

    CanvasBoard.prototype.on_click = function(pos) {
      return console.log(pos);
    };

    return CanvasBoard;

  })(BasicBoard);

  window.Board = (function(_super) {
    __extends(Board, _super);

    function Board(board, opts) {
      var _this = this;

      this.board = board;
      this.opts = opts;
      Board.__super__.constructor.call(this, this.board, this.opts);
      this.try_mode = false;
      this.board.find('#num_btn').click(function() {
        _this.show_num = _this.board.find('#num_btn i').hasClass('show-number');
        _this.board.find('#num_btn i').toggleClass('show-number');
        return _this.redraw();
      });
      this.board.find('#beginning').click(function() {
        var num, _ref;

        num = (_ref = _this.show_steps_to) != null ? _ref : _this.initial.moves.length - 1;
        if (num < 0) {
          return;
        }
        _this.show_steps_to = -1;
        _this.redraw();
        return _this.on_show_steps(_this.show_steps_to);
      });
      this.board.find('#ending').click(function() {
        var num, _ref;

        num = (_ref = _this.show_steps_to) != null ? _ref : _this.initial.moves.length - 1;
        if (num >= _this.initial.moves.length - 1) {
          return;
        }
        _this.show_steps_to = null;
        _this.redraw();
        return _this.on_show_steps(_this.initial.moves.length - 1);
      });
      this.board.find('#back').click(function() {
        var num, _ref;

        num = (_ref = _this.show_steps_to) != null ? _ref : _this.initial.moves.length - 1;
        if (num < 0) {
          return;
        }
        _this.show_steps_to = num - 1;
        _this.redraw();
        return _this.on_show_steps(_this.show_steps_to);
      });
      this.board.find('#forward').click(function() {
        var num, _ref, _ref1;

        num = (_ref = _this.show_steps_to) != null ? _ref : _this.initial.moves.length - 1;
        if (num >= _this.initial.moves.length - 1) {
          return _this.show_steps_to = null;
        } else {
          _this.show_steps_to = num + 1;
          _this.redraw();
          if (num >= _this.initial.moves.length - 1) {
            _this.show_steps_to = null;
          }
          return _this.on_show_steps((_ref1 = _this.show_steps_to) != null ? _ref1 : _this.initial.moves.length - 1);
        }
      });
    }

    Board.prototype.get_moves = function() {
      var _ref;

      return {
        current: this.initial.moves,
        step: (_ref = this.show_steps_to) != null ? _ref : this.initial.moves.length - 1
      };
    };

    Board.prototype.on_show_steps = function(step) {};

    return Board;

  })(CanvasBoard);

  window.PlayBoard = (function(_super) {
    __extends(PlayBoard, _super);

    function PlayBoard() {
      _ref = PlayBoard.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PlayBoard.prototype.calc_move = function(m) {
      var blocks;

      if (blocks = move_step(this.initial.moves, m)) {
        this.redraw();
        return m.taken = _.pluck(blocks, 'block');
      }
    };

    PlayBoard.prototype.on_click = function(pos, player) {
      var m;

      console.log(player != null ? player : player = this.board.attr('next'));
      m = {
        pos: pos,
        player: player,
        n: this.initial.moves ? this.initial.moves.length : 0
      };
      this.calc_move(m);
      this.place(m);
      this.change_to_next(player === 'black' ? 'white' : 'black');
      return this.redraw();
    };

    return PlayBoard;

  })(window.Board);

  window.ConnectedBoard = (function(_super) {
    __extends(ConnectedBoard, _super);

    function ConnectedBoard(board, opts) {
      var _ref1,
        _this = this;

      this.board = board;
      this.opts = opts;
      ConnectedBoard.__super__.constructor.call(this, this.board, this.opts);
      this.socket = io.connect("http://" + location.hostname + "/weiqi/" + (this.board.attr('socket')));
      this.socket.emit('auth', (_ref1 = $.cookie('auth')) != null ? _ref1 : 'anonymous', function(res) {
        console.log(res);
        if (typeof _this.on_connect === "function") {
          _this.on_connect();
        }
        _this.socket.on('attend', function(res) {
          console.log('attend: ' + JSON.stringify(res));
          if (_this.initial.status === 'need_player') {
            _this.board.attr('status', 'started');
            return typeof _this.on_resume === "function" ? _this.on_resume() : void 0;
          }
        });
        if (_this.on_quit) {
          _this.socket.on('quit', _this.on_quit);
        }
        _this.socket.on('taking_seat', function(res) {
          console.log('taking_seat');
          if (res === 'start') {
            _this.board.attr('status', 'taking_seat');
            return typeof _this.on_start_taking_seat === "function" ? _this.on_start_taking_seat() : void 0;
          } else {
            console.log(res);
            return typeof _this.on_seats_update === "function" ? _this.on_seats_update(res) : void 0;
          }
        });
        _this.socket.on('start', function(seats, next) {
          console.log('start: ' + JSON.stringify([seats, next]));
          _this.board.attr('status', 'started');
          _this.board.find('.players .black .name').text(seats.black.nickname).attr('href', "/u/" + seats.black.id);
          _this.board.find('.players .black .title').text(seats.black.title);
          _this.board.find('.players .white .name').text(seats.white.nickname).attr('href', "/u/" + seats.black.id);
          _this.board.find('.players .white .title').text(seats.white.title);
          _this.change_to_next(next);
          return typeof _this.on_start === "function" ? _this.on_start() : void 0;
        });
        _this.socket.on('move', function(moves, next) {
          console.log('move: ' + JSON.stringify(moves));
          _.each(moves, function(x) {
            _this.calc_move(x);
            return _this.place(x);
          });
          _this.change_to_next(next);
          _this.redraw();
          if (_this.board.attr('iam') === 'player') {
            _this.canvas.addClass('your_turn');
          }
          return typeof _this.on_move === "function" ? _this.on_move(moves, next) : void 0;
        });
        if (_this.on_disconnect) {
          _this.socket.on('disconnect', _this.on_disconnect);
        }
        _this.socket.on('player_disconnect', function() {
          return console.log('player_disconnect');
        });
        _this.socket.on('comment', _this.on_comment);
        _this.socket.on('retract', function(uid) {
          console.log('retract ' + uid);
          _this.initial.moves.pop();
          _this.change_to_next(_this.board.attr('next') === 'black' ? 'white' : 'black');
          _this.redraw();
          _this.canvas.removeClass('your_turn');
          return typeof _this.on_retract === "function" ? _this.on_retract(uid) : void 0;
        });
        _this.socket.on('surrender', function(uid) {
          console.log('surrender ' + uid);
          return typeof this.on_surrender === "function" ? this.on_surrender(uid) : void 0;
        });
        _this.board.find('#retract').click(function() {
          if (_this.board.attr('iam') === 'player' && _this.initial.moves.length && _this.board.attr('next') !== _this.board.attr('seat')) {
            return _this.socket.emit('retract', function(data) {
              if (data === 'success') {
                _this.initial.moves.pop();
                _this.change_to_next(_this.board.attr('next') === 'black' ? 'white' : 'black');
                _this.redraw();
                return _this.canvas.addClass('your_turn');
              }
            });
          }
        });
        if (_this.board.attr('status') === 'taking_seat' && _this.board.attr('iam') === 'player') {
          $('#seats').show();
          $('#seats .item a').click(function() {
            if ($(_this).hasClass('none')) {
              $('#seats .item a.mine').removeClass('mine').addClass('none').text('none');
              _this.board.attr('seat', $(_this).attr('seat'));
              _this.socket.emit('taking_seat', $(_this).attr('seat'), function(res) {
                return console.log('taking_seat: ' + JSON.stringify(res));
              });
              return $(_this).removeClass('none').addClass('mine').text('Me');
            }
          });
        }
        if (_this.board.attr('iam') === 'player' && _this.board.attr('next') === _this.board.attr('seat')) {
          _this.canvas.addClass('your_turn');
        }
        return _this.board.find('.discuss input[type=submit]').click(function() {
          var text, _ref2;

          if (text = _this.board.find('.discuss input[type=text]').val()) {
            return _this.add_discuss({
              step: ((_ref2 = game.initial.moves) != null ? _ref2.length : void 0) + 1,
              text: text
            });
          }
        });
      });
    }

    ConnectedBoard.prototype.taking_seat = function(seat, cb) {
      var _ref1,
        _this = this;

      return (_ref1 = this.socket) != null ? _ref1.emit('taking_seat', seat, function(res) {
        console.log('taking_seat: ' + JSON.stringify(res));
        return typeof cb === "function" ? cb(res) : void 0;
      }) : void 0;
    };

    ConnectedBoard.prototype.withdraw = function(pos, player) {
      console.log(this.option);
      return this.redraw();
    };

    ConnectedBoard.prototype.move = function(pos, player) {
      var move, sent, _ref1,
        _this = this;

      move = {
        pos: pos,
        player: player
      };
      sent = false;
      return (_ref1 = this.socket) != null ? _ref1.emit('move', move, function(res) {
        console.log('move: ' + JSON.stringify(res));
        sent = true;
        if (res.fail) {
          return _this.withdraw(pos, player);
        } else {
          if (res.next) {
            return _this.change_to_next(res.next);
          }
        }
      }) : void 0;
    };

    ConnectedBoard.prototype.on_connect = function() {
      return this.connected = true;
    };

    ConnectedBoard.prototype.on_disconnect = function() {
      this.connected = false;
      return console.log('disconnect');
    };

    ConnectedBoard.prototype.on_start_taking_seat = null;

    ConnectedBoard.prototype.on_seats_update = null;

    ConnectedBoard.prototype.on_quit = null;

    ConnectedBoard.prototype.on_start = null;

    ConnectedBoard.prototype.on_resume = null;

    ConnectedBoard.prototype.on_move = null;

    ConnectedBoard.prototype.on_retract = null;

    ConnectedBoard.prototype.on_surrender = null;

    ConnectedBoard.prototype.on_click = function(pos, player) {
      if (this.board.attr('status') === 'started' && this.board.attr('iam') === 'player' && this.board.attr('next') === this.board.attr('seat')) {
        ConnectedBoard.__super__.on_click.call(this, pos, player);
        this.move(pos, this.board.attr('seat'));
        return this.canvas.removeClass('your_turn');
      }
    };

    ConnectedBoard.prototype.send_comment = function(gid, comment, cb) {
      var _ref1;

      console.log(comment);
      return (_ref1 = this.socket) != null ? _ref1.emit('comment', gid, comment, cb) : void 0;
    };

    ConnectedBoard.prototype.on_comment = function(comment) {
      return console.log(comment);
    };

    return ConnectedBoard;

  })(window.PlayBoard);

}).call(this);
